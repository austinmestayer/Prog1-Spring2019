import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import javax.swing.JFileChooser;

public class Prog01_Tokenization {
	
public static File InputFileName() {
		
		JFileChooser fileChooser = new JFileChooser();	
		boolean input = false;				
		File file = null;			
		String inputLine;							
		
		try {
			
			Scanner scan = new Scanner(System.in);
			while (!input) {
				
				//prompt user for input
				System.out.println("Press [ENTER] to select a file");
				inputLine  = scan.nextLine();


				
				//user selected a valid file
				if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
					file = fileChooser.getSelectedFile();
					input = true;
				}
				
				//user failed to select a valid file
				else {
					System.out.println("Please Enter a Valid File:");
					inputLine = scan.nextLine();
				}
			}
		}
		catch (Exception e) {
			System.err.println(e);
		}
		return file;
		
	}
//______________________________________________________________________________________________________________________________
public static String[] scanReader(File mainFile) throws IOException {
	
	//declarations
	int x =0;
	int y = 0;
	Scanner scan = new Scanner (mainFile);
	String wordArray[] = new String[7];

	//scanner and character identifier
	while(scan.hasNext()) {
		
	String word = scan.next();
	char last = word.charAt(word.length()-1);
	char first = word.charAt(word.length()-word.length());
	
	//trim method
	if (last == '\"' || last == ' ' || last == '.' || last == ',' || last == '\'') {
		StringBuilder sb = new StringBuilder(word);
		sb.deleteCharAt(word.length()-1);
		word = sb.toString();
	}
	
	//trim method
	if (first == '\"' || first == ' ' || first == '.' || first == ',' || first == '\'') {
		StringBuilder sb = new StringBuilder(word);
		sb.deleteCharAt(word.length()-word.length());
		word = sb.toString();
	}
	
	wordArray[y] = word;
	y++;
	}
	return wordArray;
   }	
public static String[] wordSort(String[] wordArray) {
	int x = wordArray.length;
	
	for (int i = 0; i < wordArray.length; i++) {
	     for (int j = i + 1 ; j < wordArray.length; j++) {
	    	  if(j == wordArray.length) { j--; }
	    	  		if (wordArray[i].equals(wordArray[j])) {
	    	  				System.out.println("duplicates at " + i + " and " + j);
	    	  				wordArray[j] = null;
	    	  				
	    	  				for (int a = j; a < x-1; a++) {
	    	  					wordArray[a] = wordArray[a+1];
	    	  				}	
	                }
	          }
	     }
	return wordArray;
}
public static String[] sort(String[] wordArray) {
	
	Arrays.sort(wordArray);
	return wordArray;
}

public static String[] numberAnalyze(String[] sortedArray) {
	int count;
	
	   HashMap<String, Integer> map = new HashMap<>();
       for (String word : sortedArray) {
           if (map.containsKey(word)) {
               count = map.get(word);
               map.put(word, count + 1);
           } else {
               map.put(word, 1);
           }
       }
       String[] keys = new String[map.size()];
       Object[] values = new Object[map.size()];
       int index = 0;
       for (Entry<String, Integer> mapEntry : map.entrySet()) {
           keys[index] = mapEntry.getKey();
           values[index] = mapEntry.getValue();
           index++;
       }
       return keys;
       
}
public static Object[] numberAnalyzeValues(String[] wordArray) {
	int count;
	
	   HashMap<String, Integer> map = new HashMap<>();
       for (String word : wordArray) {
           if (map.containsKey(word)) {
               count = map.get(word);
               map.put(word, count + 1);
           } else {
               map.put(word, 1);
           }
       }
       String[] keys = new String[map.size()];
       Object[] values = new Object[map.size()];
       int index = 0;
       for (Entry<String, Integer> mapEntry : map.entrySet()) {
           keys[index] = mapEntry.getKey();
           values[index] = mapEntry.getValue();
           index++;
       }
       return values;
       
}
public static void finalSort(String[] arrayOfWords, Object[] arrayOfValues) {
	
	 int j;
     boolean flag = true;  // will determine when the sort is finished
     String temp;
     Object temporary;

     while ( flag )
     {
           flag = false;
           for ( j = 0;  j < arrayOfWords.length - 1;  j++ )
           {
                   if ( arrayOfWords [j].compareToIgnoreCase(arrayOfWords[j+1])>0)
                   {                                             // ascending sort
                               temp = arrayOfWords [j];
                               arrayOfWords [j] = arrayOfWords [j+1];     // swapping
                               arrayOfWords [j+1] = temp; 
                               
                               temporary = arrayOfValues [j];
                               arrayOfValues [j] = arrayOfValues [j+1];     // swapping
                               arrayOfValues [j+1] = temporary; 
                               
                               flag = true;
                    } 
            } 
     } 

	System.out.println(arrayOfWords[0] + ", " + arrayOfValues[0]);
	System.out.println(arrayOfWords[1] + ", " + arrayOfValues[1]);
	System.out.println(arrayOfWords[2] + ", " + arrayOfValues[2]);
	System.out.println(arrayOfWords[3] + ", " + arrayOfValues[3]);
	System.out.println(arrayOfWords[4] + ", " + arrayOfValues[4]);
	System.out.println(arrayOfWords[5] + ", " + arrayOfValues[5]);

}
public static void main(String[] args) throws IOException {	

	
	File mainFile = InputFileName();
	String wordArray[] = scanReader(mainFile);
	String sortedArray[] = sort(wordArray);
	String[] arrayOfWords = numberAnalyze(sortedArray);
	Object[] arrayOfValues = numberAnalyzeValues(sortedArray);
	
	finalSort(arrayOfWords, arrayOfValues);
	

}
}
